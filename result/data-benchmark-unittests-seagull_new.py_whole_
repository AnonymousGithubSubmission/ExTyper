cell_coverage
def (state: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, numpy.dtype[numpy.floating[numpy.typing._64Bit]]]
_count_neighbors
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]
_parse_rulestring
def (r: builtins.str) -> Tuple[builtins.list[builtins.int], builtins.list[builtins.int]]
life_rule
def (X: numpy.ndarray[Any, Any], rulestring: builtins.str) -> numpy.ndarray[Any, Any]
conway_classic
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]
shannon_entropy
def (state: Any) -> numpy.ndarray[Any, numpy.dtype[Any]]
parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Board, size: Tuple[builtins.int, builtins.int] =)
clear
def (self: seagull_new.Board)
view
def (self: seagull_new.Board, figsize: Tuple[builtins.int, builtins.int] =) -> Tuple[matplotlib.image.AxesImage, matplotlib.pyplot.Figure]
__init__
def (self: seagull_new.Simulator, board: seagull_new.Board)
compute_statistics
def (self: seagull_new.Simulator, history: numpy.ndarray[Any, Any]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
get_history
def (self: seagull_new.Simulator, exclude_init: builtins.bool =) -> numpy.ndarray[Any, Any]
def (self: seagull_new.Simulator, exclude_init: builtins.float =) -> numpy.ndarray[Any, Any]
def (self: seagull_new.Simulator, exclude_init: builtins.int =) -> numpy.ndarray[Any, Any]
def (self: seagull_new.Simulator, exclude_init: builtins.object =) -> numpy.ndarray[Any, Any]
size
def (self: seagull_new.Lifeform) -> builtins.tuple[builtins.int]
view
def (self: seagull_new.Lifeform, figsize: Tuple[builtins.int, builtins.int] =) -> matplotlib.pyplot.Figure
validate_input_values
def (self: seagull_new.Custom, X: Any)
validate_input_shapes
def (self: seagull_new.Custom, X: numpy.ndarray[Any, Any])
layout
def (self: seagull_new.Custom) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Glider)
layout
def (self: seagull_new.Glider) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.LightweightSpaceship)
layout
def (self: seagull_new.LightweightSpaceship) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.MiddleweightSpaceship)
layout
def (self: seagull_new.MiddleweightSpaceship) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Unbounded)
layout
def (self: seagull_new.Unbounded) -> numpy.ndarray[Any, Any]
___init___
def (self: seagull_new.Century)
layout
def (self: seagull_new.Century) -> numpy.ndarray[Any, Any]
___init___
def (self: seagull_new.Thunderbird)
layout
def (self: seagull_new.Thunderbird) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Blinker, length: builtins.int =)
layout
def (self: seagull_new.Blinker) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Toad)
layout
def (self: seagull_new.Toad) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Pulsar)
layout
def (self: seagull_new.Pulsar) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.FigureEight)
layout
def (self: seagull_new.FigureEight) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Beacon)
layout
def (self: seagull_new.Beacon) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Pentadecathlon)
layout
def (self: seagull_new.Pentadecathlon) -> numpy.ndarray[Any, Any]
___init___
def (self: seagull_new.ChaCha)
layout
def (self: seagull_new.ChaCha) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.RandomBox, shape: Tuple[builtins.int, builtins.int] =, seed: builtins.bool =)
def (self: seagull_new.RandomBox, shape: Tuple[builtins.int, builtins.int] =, seed: builtins.int =)
layout
def (self: seagull_new.RandomBox) -> Any
__init__
def (self: seagull_new.Box)
layout
def (self: seagull_new.Box) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Seed)
layout
def (self: seagull_new.Seed) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Moon)
layout
def (self: seagull_new.Moon) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Kite)
layout
def (self: seagull_new.Kite) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.Eater1)
layout
def (self: seagull_new.Eater1) -> numpy.ndarray[Any, Any]
__init__
def (self: seagull_new.SwitchEngine)
layout
def (self: seagull_new.SwitchEngine) -> numpy.ndarray[Any, Any]
_load_file_of_url
def (path: builtins.str) -> Any
cells2rle
def (cells_str: builtins.dict[builtins.bool, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.bytes, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.float, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.int, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.object, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, datetime.date]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, matplotlib.image.AxesImage]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, seagull_new.Board]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, seagull_new.Lifeform]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, seagull_new.Simulator]) -> builtins.str
def (cells_str: builtins.list[builtins.str]) -> builtins.str
def (cells_str: builtins.set[builtins.str]) -> builtins.str
def (cells_str: numpy.ndarray[Any, Any]) -> builtins.str
rle2cells
def (rle_str: builtins.str) -> builtins.str
add
def (self: seagull_new.Board, lifeform: seagull_new.Lifeform, loc: builtins.bytes)
def (self: seagull_new.Board, lifeform: seagull_new.Lifeform, loc: builtins.list[builtins.int])
def (self: seagull_new.Board, lifeform: seagull_new.Lifeform, loc: numpy.ndarray[Any, Any])
run
def (self: seagull_new.Simulator, rule: Any, iters: builtins.bool, **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull_new.Simulator, rule: Any, iters: builtins.int, **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull_new.Simulator, rule: Any, iters: numpy.ndarray[Any, Any], **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
__init__
def (self: seagull_new.Custom, X: numpy.ndarray[Any, Any])
parse_plaintext_layout
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
parse_cells
def (cells_str: builtins.str) -> seagull_new.Custom
parse_rle
def (rle_str: builtins.str) -> seagull_new.Custom
