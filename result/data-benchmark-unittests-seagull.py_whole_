cell_coverage
def (state: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, numpy.dtype[numpy.floating[numpy.typing._64Bit]]]
_count_neighbors
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]
_parse_rulestring
def (r: builtins.str) -> Tuple[builtins.list[builtins.int], builtins.list[builtins.int]]
life_rule
def (X: numpy.ndarray[Any, Any], rulestring: builtins.str) -> numpy.ndarray[Any, Any]
shannon_entropy
def (state: Any) -> numpy.ndarray[Any, numpy.dtype[Any]]
parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
add
def (self: seagull.Board, lifeform: Any, loc: builtins.bytes)
def (self: seagull.Board, lifeform: Any, loc: builtins.list[builtins.bool])
def (self: seagull.Board, lifeform: Any, loc: builtins.list[builtins.int])
def (self: seagull.Board, lifeform: Any, loc: builtins.set[builtins.bool])
def (self: seagull.Board, lifeform: Any, loc: builtins.set[builtins.int])
def (self: seagull.Board, lifeform: Any, loc: numpy.ndarray[Any, Any])
clear
def (self: seagull.Board)
view
def (self: seagull.Board, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> Tuple[matplotlib.image.AxesImage, matplotlib.pyplot.Figure]
compute_statistics
def (self: seagull.Simulator, history: numpy.ndarray[Any, Any]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
get_history
def (self: seagull.Simulator, exclude_init: builtins.bool =) -> numpy.ndarray[Any, Any]
def (self: seagull.Simulator, exclude_init: builtins.float =) -> numpy.ndarray[Any, Any]
def (self: seagull.Simulator, exclude_init: builtins.int =) -> numpy.ndarray[Any, Any]
def (self: seagull.Simulator, exclude_init: builtins.object =) -> numpy.ndarray[Any, Any]
animate
def (self: seagull.Simulator, figsize: Any =, interval: Literal[100]? =) -> Any
def (self: seagull.Simulator, figsize: Any =, interval: builtins.float =) -> Any
def (self: seagull.Simulator, figsize: Any =, interval: builtins.int =) -> Any
def (self: seagull.Simulator, figsize: Any =, interval: builtins.object =) -> Any
size
def (self: seagull.Lifeform) -> builtins.tuple[builtins.int]
view
def (self: seagull.Lifeform, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> matplotlib.pyplot.Figure
validate_input_values
def (self: seagull.Custom, X: Any)
validate_input_shapes
def (self: seagull.Custom, X: numpy.ndarray[Any, Any])
layout
def (self: seagull.Custom) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Glider) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.LightweightSpaceship) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.MiddleweightSpaceship) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Unbounded) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Century) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Thunderbird) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Blinker) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Toad) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Pulsar) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.FigureEight) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Beacon) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Pentadecathlon) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.ChaCha) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.RandomBox) -> Any
layout
def (self: seagull.Box) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Seed) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Moon) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Kite) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.Eater1) -> numpy.ndarray[Any, Any]
layout
def (self: seagull.SwitchEngine) -> numpy.ndarray[Any, Any]
_load_file_of_url
def (path: builtins.str) -> Any
cells2rle
def (cells_str: builtins.dict[builtins.bool, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.bytes, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.float, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.int, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.object, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, builtins.str]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, datetime.date]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, matplotlib.image.AxesImage]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, seagull.Board]) -> builtins.str
def (cells_str: builtins.dict[builtins.str, seagull.Simulator]) -> builtins.str
def (cells_str: builtins.list[builtins.str]) -> builtins.str
def (cells_str: builtins.set[builtins.str]) -> builtins.str
def (cells_str: builtins.str) -> builtins.str
def (cells_str: numpy.ndarray[Any, Any]) -> builtins.str
rle2cells
def (rle_str: builtins.str) -> Literal['']?
run
def (self: seagull.Simulator, rule: Any, iters: builtins.bool, **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull.Simulator, rule: Any, iters: builtins.int, **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull.Simulator, rule: Any, iters: numpy.ndarray[Any, Any], **kwargs: builtins.dict[builtins.object, builtins.str]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
parse_plaintext_layout
def (plaintext_str: Literal['']?) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
parse_cells
def (cells_str: builtins.str) -> seagull.Custom
parse_rle
def (rle_str: builtins.str) -> seagull.Custom
_parse_rulestring
def (r: Literal['B3/S23']?) -> Tuple[builtins.list[builtins.int], builtins.list[builtins.int]]
def (r: builtins.str) -> Tuple[builtins.list[builtins.int], builtins.list[builtins.int]]
life_rule
def (X: numpy.ndarray[Any, Any], rulestring: Literal['B3/S23']?) -> numpy.ndarray[Any, Any]
def (X: numpy.ndarray[Any, Any], rulestring: builtins.str) -> numpy.ndarray[Any, Any]
conway_classic
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]
