fold
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
timestamp
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
float_timestamp
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
int_timestamp
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
timezone
def (self: data.benchmark.pendulum.datetime.DateTime) -> Union[None, datetime.tzinfo]
tz
def (self: data.benchmark.pendulum.datetime.DateTime) -> Union[None, datetime.tzinfo]
timezone_name
def (self: Any) -> Any
is_dst
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.bool
get_offset
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
date
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
time
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.time.Time
naive
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
in_timezone
def (self: data.benchmark.pendulum.datetime.DateTime, tz: Any) -> Any
in_tz
def (self: data.benchmark.pendulum.datetime.DateTime, tz: builtins.object) -> Any
__str__
def (data.benchmark.pendulum.datetime.DateTime) -> builtins.str
__repr__
def (data.benchmark.pendulum.datetime.DateTime) -> builtins.str
is_future
def (self: Any) -> builtins.bool
is_past
def (self: Any) -> builtins.bool
is_long_year
def (self: data.benchmark.pendulum.datetime.DateTime)
is_anniversary
def (self: Any, dt: data.benchmark.pendulum.datetime.DateTime =) -> builtins.bool
def (self: Any, dt: datetime.datetime =) -> builtins.bool
add
def (self: Any, years: builtins.int =, months: builtins.int =, weeks: builtins.int =, days: builtins.int =, hours: builtins.int =, minutes: builtins.int =, seconds: builtins.int =, microseconds: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
subtract
def (self: data.benchmark.pendulum.datetime.DateTime, years: builtins.int =, months: builtins.int =, weeks: builtins.int =, days: builtins.int =, hours: builtins.int =, minutes: builtins.int =, seconds: builtins.int =, microseconds: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
_add_timedelta_
def (self: data.benchmark.pendulum.datetime.DateTime, delta: Any) -> data.benchmark.pendulum.datetime.DateTime
_subtract_timedelta
def (self: data.benchmark.pendulum.datetime.DateTime, delta: Any) -> data.benchmark.pendulum.datetime.DateTime
__add__
def (data.benchmark.pendulum.datetime.DateTime, builtins.object) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.datetime.DateTime]
__radd__
def (data.benchmark.pendulum.datetime.DateTime, builtins.object) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.datetime.DateTime]
astimezone
def (self: data.benchmark.pendulum.datetime.DateTime, tz: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
__getnewargs__
def (self: data.benchmark.pendulum.datetime.DateTime) -> Tuple[data.benchmark.pendulum.datetime.DateTime]
_getstate
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.float =) -> Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.int =) -> Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.object =) -> Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]
__reduce_ex__
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.object) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
_cmp
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.datetime.DateTime, **kwargs: Any) -> builtins.int
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.datetime, **kwargs: Any) -> builtins.int
set
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int =, month: builtins.int =, day: builtins.int =, hour: builtins.int =, minute: builtins.int =, second: builtins.int =, microsecond: builtins.int =, tz: datetime.tzinfo =) -> data.benchmark.pendulum.datetime.DateTime
offset
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.int
offset_hours
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.float
age
def (self: Any) -> builtins.int
is_utc
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.bool
on
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bool, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bool, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bool, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bool, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bool, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bytes, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bytes, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bytes, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bytes, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.bytes, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.float, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.float, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.float, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.float, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.float, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.int, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.int, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.int, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.int, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.int, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.str, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.str, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.str, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.str, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bool, month: builtins.str, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bool, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bool, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bool, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bool, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bool, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bytes, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bytes, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bytes, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bytes, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.bytes, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.float, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.float, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.float, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.float, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.float, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.int, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.int, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.int, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.int, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.int, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.str, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.str, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.str, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.str, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.bytes, month: builtins.str, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bool, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bool, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bool, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bool, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bool, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bytes, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bytes, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bytes, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bytes, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.bytes, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.float, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.float, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.float, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.float, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.float, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.int, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.int, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.int, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.int, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.int, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.str, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.str, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.str, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.str, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.float, month: builtins.str, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bool, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bool, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bool, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bool, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bool, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bytes, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bytes, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bytes, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bytes, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.bytes, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.float, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.float, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.float, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.float, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.float, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.int, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.int, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.int, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.int, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.int, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.str, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.str, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.str, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.str, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.int, month: builtins.str, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bool, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bool, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bool, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bool, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bool, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bytes, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bytes, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bytes, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bytes, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.bytes, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.float, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.float, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.float, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.float, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.float, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.int, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.int, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.int, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.int, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.int, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.str, day: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.str, day: builtins.bytes) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.str, day: builtins.float) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.str, day: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, year: builtins.str, month: builtins.str, day: builtins.str) -> data.benchmark.pendulum.datetime.DateTime
at
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.float =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.int =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.bool, minute: builtins.object =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.float =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.int =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.float =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.float =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.float =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.int =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.int =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.int =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.object =, microsecond: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.object =, microsecond: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, hour: builtins.int, minute: builtins.object =, second: builtins.object =, microsecond: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
to_time_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_datetime_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_day_datetime_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
_to_string
def (self: data.benchmark.pendulum.datetime.DateTime, fmt: builtins.str, locale: builtins.str =) -> builtins.str
def (self: data.benchmark.pendulum.datetime.DateTime, fmt: builtins.str, locale: data.benchmark.pendulum.locales.locale.Locale =) -> builtins.str
is_same_day
def (self: data.benchmark.pendulum.datetime.DateTime, dt: data.benchmark.pendulum.datetime.DateTime) -> builtins.bool
def (self: data.benchmark.pendulum.datetime.DateTime, dt: datetime.datetime) -> builtins.bool
__init__
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.date.Date, end: data.benchmark.pendulum.date.Date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.date.Date, end: data.benchmark.pendulum.datetime.DateTime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.date.Date, end: datetime.date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.date.Date, end: datetime.datetime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.datetime.DateTime, end: data.benchmark.pendulum.date.Date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.datetime.DateTime, end: data.benchmark.pendulum.datetime.DateTime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.datetime.DateTime, end: datetime.date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: data.benchmark.pendulum.datetime.DateTime, end: datetime.datetime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.date, end: data.benchmark.pendulum.date.Date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.date, end: data.benchmark.pendulum.datetime.DateTime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.date, end: datetime.date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.date, end: datetime.datetime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.datetime, end: data.benchmark.pendulum.date.Date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.datetime, end: data.benchmark.pendulum.datetime.DateTime, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.datetime, end: datetime.date, absolute: builtins.bool =)
def (self: data.benchmark.pendulum.period.Period, start: datetime.datetime, end: datetime.datetime, absolute: builtins.bool =)
diff
def (self: Any, dt: data.benchmark.pendulum.date.Date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
def (self: Any, dt: data.benchmark.pendulum.datetime.DateTime =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
def (self: Any, dt: datetime.date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
def (self: Any, dt: datetime.datetime =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
_start_of_second
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_second
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_minute
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_minute
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_hour
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_hour
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_day
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_day
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_month
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_month
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_year
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_year
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_decade
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_decade
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_start_of_century
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
_end_of_century
def (self: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
next
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
previous
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
_first_of_quarter
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
_last_of_quarter
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
_first_of_year
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
_last_of_year
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
average
def (self: Any, dt: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: Any, dt: data.benchmark.pendulum.date.Date =) -> data.benchmark.pendulum.datetime.DateTime
def (self: Any, dt: data.benchmark.pendulum.datetime.DateTime =) -> data.benchmark.pendulum.datetime.DateTime
def (self: Any, dt: data.benchmark.pendulum.mixins.default.FormattableMixin =) -> data.benchmark.pendulum.datetime.DateTime
def (self: Any, dt: datetime.date =) -> data.benchmark.pendulum.datetime.DateTime
def (self: Any, dt: datetime.datetime =) -> data.benchmark.pendulum.datetime.DateTime
__sub__
def (data.benchmark.pendulum.datetime.DateTime, builtins.bool) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.bytes) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.bool, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.bytes, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.float, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.int, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.object, builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.object, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.float) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.int) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.bool]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.bytes]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.float]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.bool]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.bytes]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.float]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.str) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum._extensions.helpers.PreciseDiff) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.date.Date) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.datetime.DateTime) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.formatting.formatter.Formatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.locales.locale.Locale) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.mixins.default.FormattableMixin) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.parsing._Interval) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.time.Time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader.Reader) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader.header) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.transition.Transition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.timedelta) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.datetime.DateTime]
def (data.benchmark.pendulum.datetime.DateTime, datetime.timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.tzinfo) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.Match[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.Pattern[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.TypeVar) -> builtins._NotImplementedType
__rsub__
def (data.benchmark.pendulum.datetime.DateTime, builtins.bool) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.bytes) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.bool, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.bytes, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.float, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.int, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.object, builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.object, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.dict[builtins.str, typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.float) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.int) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.bool]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.bytes]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.float]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.list[typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.bool]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.bytes]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.float]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum._extensions.helpers.PreciseDiff]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.date.Date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.formatting.formatter.Formatter]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.locales.locale.Locale]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.mixins.default.FormattableMixin]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.parsing._Interval]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.time.Time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader.Reader]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader._offset]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.reader.header]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.transition.Transition]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.date]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.datetime]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.time]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.timedelta]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.timezone]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[datetime.tzinfo]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.set[typing.TypeVar]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, builtins.str) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum._extensions.helpers.PreciseDiff) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.date.Date) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.datetime.DateTime) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.formatting.formatter.Formatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.locales.locale.Locale) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.mixins.default.FormattableMixin) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.parsing._Interval) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.time.Time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader.Reader) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.reader.header) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.transition.Transition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.datetime) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.datetime.DateTime, datetime.time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.timedelta) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, datetime.tzinfo) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.Match[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.Pattern[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.datetime.DateTime, typing.TypeVar) -> builtins._NotImplementedType
to_atom_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_cookie_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_iso8601_string
def (self: Any) -> builtins.str
to_rfc822_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rfc850_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rfc1036_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rfc1123_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rfc2822_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rfc3339_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_rss_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
to_w3c_string
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.str
closest
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
farthest
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.list[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.list[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.set[data.benchmark.pendulum.datetime.DateTime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: builtins.set[datetime.datetime]) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, dt1: datetime.datetime, dt2: datetime.datetime, dts: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> data.benchmark.pendulum.datetime.DateTime
_start_of_week
def (self: Any) -> data.benchmark.pendulum.datetime.DateTime
_end_of_week
def (self: Any) -> data.benchmark.pendulum.datetime.DateTime
_first_of_month
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.time.Time) -> data.benchmark.pendulum.datetime.DateTime
_last_of_month
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.date.Date =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.datetime.DateTime =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: data.benchmark.pendulum.time.Time =) -> data.benchmark.pendulum.datetime.DateTime
_nth_of_quarter
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
_nth_of_year
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
__reduce_ex__
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.bool) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.bytes) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.dict[builtins.object, builtins.object]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.float) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.int) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.list[builtins.int]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.list[builtins.object]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.list[builtins.str]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.object) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.set[builtins.object]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: builtins.str) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum._extensions.helpers.PreciseDiff) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.date.Date) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.datetime.DateTime) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.formatting.formatter.Formatter) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.locales.locale.Locale) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.mixins.default.FormattableMixin) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.parsing._Interval) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.time.Time) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.reader.Reader) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.reader.header) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.transition.Transition) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.date) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.datetime) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.time) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.timedelta) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.timezone) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: datetime.tzinfo) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: typing.Match[Any]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: typing.Pattern[Any]) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
def (self: data.benchmark.pendulum.datetime.DateTime, protocol: typing.TypeVar) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
__reduce__
def (self: data.benchmark.pendulum.datetime.DateTime) -> Tuple[Tuple[Union[None, datetime.tzinfo], builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int, builtins.int], Type[data.benchmark.pendulum.datetime.DateTime]]
format
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.bool =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.float =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.int =, locale: Any =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter, diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.object =, locale: Any =) -> Union[Any, builtins.object]
format_diff
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
next
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.float =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.bool =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.float =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.int =) -> data.benchmark.pendulum.datetime.DateTime
def (self: data.benchmark.pendulum.datetime.DateTime, day_of_week: builtins.int =, keep_time: builtins.object =) -> data.benchmark.pendulum.datetime.DateTime
_nth_of_month
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
def (self: data.benchmark.pendulum.datetime.DateTime, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.datetime.DateTime]
format_diff
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.bool =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.float =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.int =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.duration.Duration, is_now: builtins.object =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.bool =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.float =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.int =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (diff: data.benchmark.pendulum.period.Period, is_now: builtins.object =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
diff_for_humans
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.date.Date =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.date.Date =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.date.Date =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.date.Date =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.datetime.DateTime =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.datetime.DateTime =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.datetime.DateTime =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: data.benchmark.pendulum.datetime.DateTime =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.date =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.date =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.date =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.date =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.datetime =, absolute: builtins.bool =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.datetime =, absolute: builtins.float =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.datetime =, absolute: builtins.int =, locale: builtins.object =) -> Union[Any, builtins.object]
def (self: data.benchmark.pendulum.datetime.DateTime, other: datetime.datetime =, absolute: builtins.object =, locale: builtins.object =) -> Union[Any, builtins.object]
is_local
def (self: data.benchmark.pendulum.datetime.DateTime) -> builtins.bool
