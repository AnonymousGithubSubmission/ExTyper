day_of_week
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
week_of_year
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
days_in_month
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
quarter
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
to_date_string
def (self: data.benchmark.pendulum.date.Date) -> builtins.str
to_formatted_date_string
def (self: data.benchmark.pendulum.date.Date) -> builtins.str
__repr__
def (data.benchmark.pendulum.date.Date) -> builtins.str
is_future
def (self: data.benchmark.pendulum.date.Date) -> builtins.bool
is_past
def (self: data.benchmark.pendulum.date.Date) -> builtins.bool
is_leap_year
def (self: data.benchmark.pendulum.date.Date) -> builtins.bool
is_long_year
def (self: data.benchmark.pendulum.date.Date)
is_same_day
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.date.Date) -> builtins.bool
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.datetime.DateTime) -> builtins.bool
is_anniversary
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.date.Date =) -> builtins.bool
def (self: data.benchmark.pendulum.date.Date, dt: datetime.date =) -> builtins.bool
add
def (self: data.benchmark.pendulum.date.Date, years: builtins.int =, months: builtins.int =, weeks: builtins.int =, days: Any =) -> data.benchmark.pendulum.date.Date
subtract
def (self: data.benchmark.pendulum.date.Date, years: builtins.int =, months: builtins.int =, weeks: builtins.int =, days: builtins.float =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, years: builtins.int =, months: builtins.int =, weeks: builtins.int =, days: builtins.int =) -> data.benchmark.pendulum.date.Date
_add_timedelta
def (self: data.benchmark.pendulum.date.Date, delta: datetime.timedelta) -> data.benchmark.pendulum.date.Date
_subtract_timedelta
def (self: data.benchmark.pendulum.date.Date, delta: datetime.timedelta) -> data.benchmark.pendulum.date.Date
__add__
def (data.benchmark.pendulum.date.Date, builtins.bool) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.bytes) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.dict[builtins.object, builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.float) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.int) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.set[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.str) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum._extensions.helpers.PreciseDiff) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.date.Date) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.datetime.DateTime) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.formatting.formatter.Formatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.locales.locale.Locale) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.mixins.default.FormattableMixin) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.parsing._Interval) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.time.Time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader.Reader) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader.header) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.transition.Transition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.date) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.datetime) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.timedelta) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.date.Date]
def (data.benchmark.pendulum.date.Date, datetime.timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.tzinfo) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.Match[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.Pattern[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.TypeVar) -> builtins._NotImplementedType
diff
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.date.Date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, dt: datetime.date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
diff_for_humans
def (self: data.benchmark.pendulum.date.Date, other: data.benchmark.pendulum.date.Date =, absolute: builtins.bool =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: data.benchmark.pendulum.date.Date =, absolute: builtins.float =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: data.benchmark.pendulum.date.Date =, absolute: builtins.int =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: data.benchmark.pendulum.date.Date =, absolute: builtins.object =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: datetime.date =, absolute: builtins.bool =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: datetime.date =, absolute: builtins.float =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: datetime.date =, absolute: builtins.int =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, other: datetime.date =, absolute: builtins.object =, locale: builtins.object =) -> data.benchmark.pendulum.period.Period
_start_of_day
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_day
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
next
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.float =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
previous
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.float =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
replace
def (self: data.benchmark.pendulum.date.Date, year: builtins.int =, month: builtins.int =, day: builtins.int =) -> data.benchmark.pendulum.date.Date
set
def (self: data.benchmark.pendulum.date.Date, year: builtins.bool =, month: builtins.bool =, day: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.bool =, month: builtins.bool =, day: builtins.int =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.bool =, month: builtins.int =, day: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.bool =, month: builtins.int =, day: builtins.int =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.int =, month: builtins.bool =, day: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.int =, month: builtins.bool =, day: builtins.int =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.int =, month: builtins.int =, day: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, year: builtins.int =, month: builtins.int =, day: builtins.int =) -> data.benchmark.pendulum.date.Date
day_of_year
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
week_of_month
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
age
def (self: data.benchmark.pendulum.date.Date) -> builtins.int
closest
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
farthest
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.date.Date, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: data.benchmark.pendulum.datetime.DateTime, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.date, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: datetime.date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt1: datetime.datetime, dt2: datetime.datetime) -> data.benchmark.pendulum.date.Date
__sub__
def (data.benchmark.pendulum.date.Date, builtins.bool) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.bytes) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.dict[builtins.object, builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.float) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.int) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.int]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.list[builtins.str]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.set[builtins.object]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, builtins.str) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum._extensions.helpers.PreciseDiff) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.date.Date) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.datetime.DateTime) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.formatting.difference_formatter.DifferenceFormatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.formatting.formatter.Formatter) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.locales.locale.Locale) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.mixins.default.FormattableMixin) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.parsing._Interval) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.time.Time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTimezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.posix_timezone.PosixTransition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader.Reader) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader._offset) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.reader.header) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.timezone.Timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.transition.Transition) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, data.benchmark.pendulum.tz.zoneinfo.transition_type.TransitionType) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.date) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.date.Date, datetime.datetime) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.period.Period]
def (data.benchmark.pendulum.date.Date, datetime.time) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.timedelta) -> Union[builtins._NotImplementedType, data.benchmark.pendulum.date.Date]
def (data.benchmark.pendulum.date.Date, datetime.timezone) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, datetime.tzinfo) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.Match[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.Pattern[Any]) -> builtins._NotImplementedType
def (data.benchmark.pendulum.date.Date, typing.TypeVar) -> builtins._NotImplementedType
_start_of_month
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_month
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_start_of_year
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_year
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_start_of_decade
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_decade
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_start_of_century
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_century
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_start_of_week
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_end_of_week
def (self: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
_first_of_quarter
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
_last_of_quarter
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
_first_of_year
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
_last_of_year
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
diff
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.date.Date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
def (self: data.benchmark.pendulum.date.Date, dt: datetime.date =, abs: builtins.bool =) -> data.benchmark.pendulum.period.Period
average
def (self: data.benchmark.pendulum.date.Date, dt: data.benchmark.pendulum.date.Date =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, dt: datetime.date =) -> data.benchmark.pendulum.date.Date
_first_of_month
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.date.Date) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.datetime.DateTime) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.time.Time) -> data.benchmark.pendulum.date.Date
_last_of_month
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.bool =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: builtins.int =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.date.Date =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.datetime.DateTime =) -> data.benchmark.pendulum.date.Date
def (self: data.benchmark.pendulum.date.Date, day_of_week: data.benchmark.pendulum.time.Time =) -> data.benchmark.pendulum.date.Date
_nth_of_month
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
_nth_of_quarter
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
_nth_of_year
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.bool) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
def (self: data.benchmark.pendulum.date.Date, nth: builtins.int, day_of_week: builtins.int) -> Union[builtins.bool, data.benchmark.pendulum.date.Date]
