lex
def (characters: builtins.str, token_exprs: builtins.dict[builtins.bool, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.bytes, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.float, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.int, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.object, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Equality]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Parser]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Result]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.list[builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.set[builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.str) -> builtins.list[Tuple[Any, builtins.str]]
__init__
def (self: imp.Result, value: builtins.str, pos: builtins.bool)
def (self: imp.Result, value: builtins.str, pos: builtins.int)
__repr__
def (imp.Result) -> builtins.str
__init__
def (self: imp.Tag, tag: builtins.str)
__init__
def (self: imp.Reserved, value: builtins.str, tag: builtins.str)
__init__
def (self: imp.Concat, left: imp.Parser, right: imp.Parser)
__init__
def (self: imp.Exp, parser: imp.Parser, separator: imp.Parser)
__init__
def (self: imp.Alternate, left: imp.Parser, right: imp.Parser)
__call__
def (self: imp.Alternate, tokens: builtins.object, pos: builtins.object) -> imp.Result
__init__
def (self: imp.Opt, parser: imp.Parser)
__call__
def (self: imp.Opt, tokens: builtins.object, pos: builtins.bool) -> imp.Result
def (self: imp.Opt, tokens: builtins.object, pos: builtins.int) -> imp.Result
__init__
def (self: imp.Rep, parser: imp.Parser)
__init__
def (self: imp.Process, parser: imp.Parser, function: imp.Parser)
__call__
def (self: imp.Process, tokens: builtins.object, pos: builtins.object) -> imp.Result
__init__
def (self: imp.Lazy, parser_func: imp.Parser)
__call__
def (self: imp.Lazy, tokens: builtins.object, pos: builtins.object) -> imp.Result
__init__
def (self: imp.Phrase, parser: imp.Parser)
__call__
def (self: imp.Phrase, tokens: Any, pos: builtins.object) -> imp.Result
__eq__
def (imp.Equality, builtins.object) -> builtins.bool
__ne__
def (imp.Equality, builtins.object) -> builtins.bool
__init__
def (self: imp.AssignStatement, name: builtins.str, aexp: imp.Equality)
__repr__
def (imp.AssignStatement) -> builtins.str
eval
def (self: imp.AssignStatement, env: builtins.dict[builtins.int, builtins.str])
__init__
def (self: imp.CompoundStatement, first: imp.Equality, second: imp.Equality)
__repr__
def (imp.CompoundStatement) -> builtins.str
eval
def (self: imp.CompoundStatement, env: builtins.dict[builtins.bool, builtins.str])
def (self: imp.CompoundStatement, env: builtins.dict[builtins.int, builtins.str])
__init__
def (self: imp.IfStatement, condition: imp.Equality, true_stmt: imp.Equality, false_stmt: imp.Equality)
__repr__
def (imp.IfStatement) -> builtins.str
eval
def (self: imp.IfStatement, env: builtins.dict[builtins.bool, builtins.str])
def (self: imp.IfStatement, env: builtins.dict[builtins.int, builtins.str])
__init__
def (self: imp.WhileStatement, condition: imp.Equality, body: imp.Equality)
__repr__
def (imp.WhileStatement) -> builtins.str
eval
def (self: imp.WhileStatement, env: builtins.dict[builtins.bool, builtins.str])
def (self: imp.WhileStatement, env: builtins.dict[builtins.int, builtins.str])
__init__
def (self: imp.IntAexp, i: builtins.bool)
def (self: imp.IntAexp, i: builtins.int)
__repr__
def (imp.IntAexp) -> builtins.str
eval
def (self: imp.IntAexp, env: builtins.object) -> builtins.int
__init__
def (self: imp.VarAexp, name: builtins.str)
__repr__
def (imp.VarAexp) -> builtins.str
eval
def (self: imp.VarAexp, env: builtins.dict[builtins.object, builtins.object]) -> builtins.object
__init__
def (self: imp.BinopAexp, op: builtins.str, left: imp.Equality, right: imp.Equality)
__repr__
def (imp.BinopAexp) -> builtins.str
eval
def (self: imp.BinopAexp, env: builtins.dict[builtins.bool, builtins.str]) -> <partial None>
def (self: imp.BinopAexp, env: builtins.dict[builtins.int, builtins.str]) -> <partial None>
__init__
def (self: imp.RelopBexp, op: builtins.str, left: imp.Equality, right: imp.Equality)
__repr__
def (imp.RelopBexp) -> builtins.str
eval
def (self: imp.RelopBexp, env: builtins.dict[builtins.bool, builtins.str]) -> <partial None>
def (self: imp.RelopBexp, env: builtins.dict[builtins.int, builtins.str]) -> <partial None>
__init__
def (self: imp.AndBexp, left: imp.Equality, right: imp.Equality)
__repr__
def (imp.AndBexp) -> builtins.str
eval
def (self: imp.AndBexp, env: builtins.dict[builtins.bool, builtins.str]) -> builtins.int
def (self: imp.AndBexp, env: builtins.dict[builtins.int, builtins.str]) -> builtins.int
__init__
def (self: imp.OrBexp, left: imp.Equality, right: imp.Equality)
__repr__
def (imp.OrBexp) -> builtins.str
eval
def (self: imp.OrBexp, env: builtins.dict[builtins.bool, builtins.str]) -> builtins.int
def (self: imp.OrBexp, env: builtins.dict[builtins.int, builtins.str]) -> builtins.int
__init__
def (self: imp.NotBexp, exp: imp.Equality)
__repr__
def (imp.NotBexp) -> builtins.str
eval
def (self: imp.NotBexp, env: builtins.dict[builtins.bool, builtins.str]) -> builtins.bool
def (self: imp.NotBexp, env: builtins.dict[builtins.int, builtins.str]) -> builtins.bool
keyword
def (kw: builtins.str) -> imp.Reserved
__init__
def (self: imp.Tag, tag: builtins.str)
lex
def (characters: builtins.str, token_exprs: builtins.dict[builtins.bool, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.bytes, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.float, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.int, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.object, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Equality]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Parser]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.dict[builtins.str, imp.Result]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.list[Tuple[Union[None, builtins.str], builtins.str]]) -> Union[builtins.list[Tuple[Any, Any]], builtins.list[Tuple[Any, builtins.int]], builtins.list[Tuple[Any, builtins.str]]]
def (characters: builtins.str, token_exprs: builtins.list[builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.set[builtins.str]) -> builtins.list[Tuple[Any, builtins.str]]
def (characters: builtins.str, token_exprs: builtins.str) -> builtins.list[Tuple[Any, builtins.str]]
imp_lex
def (characters: builtins.str) -> Union[builtins.list[Tuple[Any, Any]], builtins.list[Tuple[Any, builtins.int]], builtins.list[Tuple[Any, builtins.str]]]
__init__
def (self: imp.Concat, left: imp.Parser, right: imp.Parser)
__add__
def (imp.Parser, imp.Parser) -> imp.Concat
__init__
def (self: imp.Exp, parser: imp.Parser, separator: imp.Parser)
__mul__
def (imp.Parser, imp.Parser) -> imp.Exp
__init__
def (self: imp.Alternate, left: imp.Parser, right: imp.Parser)
__or__
def (imp.Parser, imp.Parser) -> imp.Alternate
__init__
def (self: imp.Process, parser: imp.Parser, function: imp.Parser)
__xor__
def (imp.Parser, imp.Parser) -> imp.Process
__call__
def (self: imp.Tag, tokens: builtins.list[builtins.str], pos: builtins.bool) -> imp.Result
def (self: imp.Tag, tokens: builtins.list[builtins.str], pos: builtins.int) -> imp.Result
def (self: imp.Tag, tokens: builtins.str, pos: builtins.bool) -> imp.Result
def (self: imp.Tag, tokens: builtins.str, pos: builtins.int) -> imp.Result
__call__
def (self: imp.Reserved, tokens: builtins.list[builtins.str], pos: builtins.bool) -> imp.Result
def (self: imp.Reserved, tokens: builtins.list[builtins.str], pos: builtins.int) -> imp.Result
def (self: imp.Reserved, tokens: builtins.str, pos: builtins.bool) -> imp.Result
def (self: imp.Reserved, tokens: builtins.str, pos: builtins.int) -> imp.Result
__init__
def (self: imp.Result, value: builtins.str, pos: builtins.bool)
def (self: imp.Result, value: builtins.str, pos: builtins.int)
def (self: imp.Result, value: builtins.tuple[Any], pos: builtins.bool)
def (self: imp.Result, value: builtins.tuple[Any], pos: builtins.int)
__call__
def (self: imp.Concat, tokens: builtins.object, pos: builtins.object) -> imp.Result
__call__
def (self: imp.Exp, tokens: builtins.object, pos: builtins.object) -> imp.Result
__call__
def (self: imp.Rep, tokens: builtins.object, pos: builtins.float) -> Any
def (self: imp.Rep, tokens: builtins.object, pos: builtins.int) -> Any
def (self: imp.Rep, tokens: builtins.object, pos: builtins.object) -> Any
